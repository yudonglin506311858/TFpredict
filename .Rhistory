library("devtools")
install.packages("devtools")
install.packages("curl")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("Biostrings", "TFBSTools", "JASPAR2022",
"BSgenome.Hsapiens.UCSC.hg19", "BSgenome.Mmusculus.UCSC.mm10"))
#' Get promoter sequences for target genes
#'
#' @param target_gene A character vector of gene symbols
#' @param species A character string specifying species ("human" or "mouse")
#' @param promoter_start Distance upstream of TSS (default: 2000)
#' @param promoter_end Distance downstream of TSS (default: 200)
#' @return A DNAStringSet object containing promoter sequences
#' @export
#' @examples
#' promoter_seq <- get_promoter_sequences("GATA1", "human", 2000, 200)
get_promoter_sequences <- function(target_gene, species = c("human", "mouse"),
promoter_start = 2000, promoter_end = 200) {
species <- match.arg(species)
# Check if required BSgenome package is installed
bsgenome_pkg <- ifelse(species == "human",
"BSgenome.Hsapiens.UCSC.hg19",
"BSgenome.Mmusculus.UCSC.mm10")
if (!requireNamespace(bsgenome_pkg, quietly = TRUE)) {
stop(paste("Please install", bsgenome_pkg,
"using BiocManager::install()"))
}
# Load the appropriate BSgenome package
genome <- switch(species,
human = BSgenome.Hsapiens.UCSC.hg19::BSgenome.Hsapiens.UCSC.hg19,
mouse = BSgenome.Mmusculus.UCSC.mm10::BSgenome.Mmusculus.UCSC.mm10)
# For simplicity, this example assumes the gene symbol is the same as the seqname
# In a real implementation, you would need to map gene symbols to genomic coordinates
# using a package like TxDb.Hsapiens.UCSC.hg19.knownGene or similar
# This is a simplified version - in practice you'd need proper gene coordinate mapping
seqname <- target_gene
tss <- 1000000  # Example TSS position - replace with real mapping
# Get promoter sequence
promoter_seq <- Biostrings::getSeq(
genome,
names = seqname,
start = tss - promoter_start,
end = tss + promoter_end
)
names(promoter_seq) <- target_gene
return(promoter_seq)
}
promoter_seq <- get_promoter_sequences("GATA1", "human", 2000, 200)
export(TFpredict)
import(Biostrings)
library(Biostrings)
library(TFBSTools)
library(Biostrings)
library(TFBSTools)
library(Biostrings)
library(TFBSTools)
install.packages("TFBSTools")
BiocManager::install("TFBSTools")
install.packages("DirichletMultinomial", type = "source")
install.packages("DirichletMultinomial")
library(JASPAR2022)
library(BSgenome.Hsapiens.UCSC.hg19)
library(methods)
BiocManager::install(c("Biostrings", "TFBSTools", "JASPAR2022",  "BSgenome.Hsapiens.UCSC.hg19", "BSgenome.Mmusculus.UCSC.mm10"))
BiocManager::install(c("Biostrings", "TFBSTools", "JASPAR2022",  "BSgenome.Hsapiens.UCSC.hg19", "BSgenome.Mmusculus.UCSC.mm10"))
BiocManager::install(c("Biostrings", "TFBSTools", "JASPAR2022",  "BSgenome.Hsapiens.UCSC.hg19", "BSgenome.Mmusculus.UCSC.mm10"))
BiocManager::install(c("Biostrings", "TFBSTools", "JASPAR2022",  "BSgenome.Hsapiens.UCSC.hg19", "BSgenome.Mmusculus.UCSC.mm10"))
BiocManager::install(c("Biostrings", "TFBSTools", "JASPAR2022"))
#' @param target_gene A character vector of gene symbols
#' @param species A character string specifying species ("human" or "mouse")
#' @param promoter_start Distance upstream of TSS (default: 2000)
#' @param promoter_end Distance downstream of TSS (default: 200)
#' @param min_score Minimum score threshold for PWM matching (default: "85%")
#' @return A data.frame with predicted transcription factors and their binding sites
#' @export
#' @examples
#' TF <- TFpredict(target_gene = "GATA1", species = "human",
#'                 promoter_start = 2000, promoter_end = 200)
TFpredict <- function(target_gene, species = c("human", "mouse"),
promoter_start = 2000, promoter_end = 200,
min_score = "85%") {
# Get promoter sequences
promoter_seq <- get_promoter_sequences(target_gene, species,
promoter_start, promoter_end)
# Get JASPAR database matrices
species_code <- switch(species,
human = 9606,
mouse = 10090)
opts <- list(species = species_code, collection = "CORE")
pfm_list <- TFBSTools::getMatrixSet(JASPAR2022::JASPAR2022, opts)
# Convert to PWM
pwm_list <- lapply(pfm_list, function(pfm) TFBSTools::toPWM(pfm))
# Find TF binding sites
hits <- lapply(pwm_list, function(pwm) {
if (methods::is(pwm, "PWMatrix")) {
Biostrings::matchPWM(pwm@profileMatrix, promoter_seq, min.score = min_score)
} else {
return(NULL)
}
})
# Filter empty hits
hits <- hits[sapply(hits, length) > 0]
# Get TF names
tf_names <- sapply(pfm_list, function(pfm) pfm@name)
matched_tf_names <- tf_names[names(hits)]
# Create result data frame
result <- do.call(rbind, lapply(names(hits), function(tf_name) {
tf_views <- hits[[tf_name]]
sequences <- as.character(tf_views)
data.frame(
JASPAR_ID = tf_name,
Gene_Symbol = matched_tf_names[tf_name],
Views_Count = length(sequences),
Sequences = paste(sequences, collapse = "/"),
stringsAsFactors = FALSE
)
}))
rownames(result) <- NULL
return(result)
}
#' Get promoter sequences for target genes
#'
#' @param target_gene A character vector of gene symbols
#' @param species A character string specifying species ("human" or "mouse")
#' @param promoter_start Distance upstream of TSS (default: 2000)
#' @param promoter_end Distance downstream of TSS (default: 200)
#' @return A DNAStringSet object containing promoter sequences
#' @export
#' @examples
#' promoter_seq <- get_promoter_sequences("GATA1", "human", 2000, 200)
get_promoter_sequences <- function(target_gene, species = c("human", "mouse"),
promoter_start = 2000, promoter_end = 200) {
species <- match.arg(species)
# Check if required BSgenome package is installed
bsgenome_pkg <- ifelse(species == "human",
"BSgenome.Hsapiens.UCSC.hg19",
"BSgenome.Mmusculus.UCSC.mm10")
if (!requireNamespace(bsgenome_pkg, quietly = TRUE)) {
stop(paste("Please install", bsgenome_pkg,
"using BiocManager::install()"))
}
# Load the appropriate BSgenome package
genome <- switch(species,
human = BSgenome.Hsapiens.UCSC.hg19::BSgenome.Hsapiens.UCSC.hg19,
mouse = BSgenome.Mmusculus.UCSC.mm10::BSgenome.Mmusculus.UCSC.mm10)
# For simplicity, this example assumes the gene symbol is the same as the seqname
# In a real implementation, you would need to map gene symbols to genomic coordinates
# using a package like TxDb.Hsapiens.UCSC.hg19.knownGene or similar
# This is a simplified version - in practice you'd need proper gene coordinate mapping
seqname <- target_gene
tss <- 1000000  # Example TSS position - replace with real mapping
# Get promoter sequence
promoter_seq <- Biostrings::getSeq(
genome,
names = seqname,
start = tss - promoter_start,
end = tss + promoter_end
)
names(promoter_seq) <- target_gene
return(promoter_seq)
}
promoter_seq <- get_promoter_sequences("GATA1", "human", 2000, 200)
BiocManager::install(c( "BSgenome.Hsapiens.UCSC.hg19"))
